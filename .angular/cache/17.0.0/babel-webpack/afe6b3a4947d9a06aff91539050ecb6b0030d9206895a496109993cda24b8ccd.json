{"ast":null,"code":"// patient-dashboard.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PatientDashboard = class PatientDashboard {\n  constructor(fb, patientService) {\n    this.fb = fb;\n    this.patientService = patientService;\n    this.updateForm = this.fb.group({\n      name: [null],\n      lastName: [null],\n      dateOfBirth: [null],\n      phone: [null],\n      email: [null],\n      city: [null],\n      pic: [null],\n      bloodType: [null],\n      eps: [null]\n    });\n  }\n  ngOnInit() {\n    this.loadPatientInfo();\n  }\n  loadPatientInfo() {\n    const patientId = obtenerIdDelToken();\n    this.patientService.loadPatientInfo(patientId).subscribe(data => {\n      this.patientInfo = data;\n      this.selectedDate = new Date(this.patientInfo.dateOfBirth);\n      this.updateForm.patchValue({\n        name: this.patientInfo.name,\n        lastName: this.patientInfo.lastName,\n        dateOfBirth: this.selectedDate,\n        phone: this.patientInfo.phone,\n        email: this.patientInfo.email,\n        city: this.patientInfo.city,\n        pic: this.patientInfo.pictureUrl,\n        bloodType: this.patientInfo.bloodType,\n        eps: this.patientInfo.eps\n      });\n      // Guarda el valor original del formulario\n      this.originalFormValue = this.updateForm.value;\n    }, error => {\n      console.error('Error al cargar la información del paciente', error);\n    });\n  }\n  updatePatientInfo() {\n    if (this.updateForm.valid) {\n      // Crea un objeto con solo los campos modificados\n      const modifiedData = {\n        id: obtenerIdDelToken(),\n        name: this.updateForm.value.name ?? null,\n        lastName: this.updateForm.value.lastName ?? null,\n        dateOfBirth: this.updateForm.value.dateOfBirth ?? null,\n        phone: this.updateForm.value.phone ?? null,\n        email: this.updateForm.value.email ?? null,\n        city: this.updateForm.value.city ?? null,\n        pic: this.updateForm.value.pic ?? null,\n        bloodType: this.updateForm.value.bloodType ?? null,\n        eps: this.updateForm.value.eps ?? null\n      };\n      // Envia solo los campos modificados al servicio\n      this.patientService.updatePatientInfo(modifiedData).subscribe(response => {\n        console.log(response);\n      }, error => {\n        console.error('Error al actualizar la información del paciente', error);\n      });\n    } else {\n      // El formulario no es válido, realiza las acciones necesarias\n    }\n  }\n};\nPatientDashboard = __decorate([Component({\n  selector: 'patient-dashboard',\n  templateUrl: 'patient-dashboard.component.html',\n  styleUrls: ['patient-dashboard.component.css']\n})], PatientDashboard);\nexport { PatientDashboard };\nfunction obtenerIdDelToken() {\n  // Ajusta según cómo obtienes el ID del token\n  return 1;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}