{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PatientService = /*#__PURE__*/(() => {\n  class PatientService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = environment.apiBaseUrl + '/patient';\n    }\n    //Account Section --->\n    updatePatientInfo(infoUpdatePatientDTO) {\n      const url = `${this.baseUrl}/account/info-update`;\n      return this.httpClient.post(url, infoUpdatePatientDTO);\n    }\n    loadPatientInfo(patientId) {\n      const url = `${this.baseUrl}/account/load-info/${patientId}`;\n      return this.httpClient.get(url);\n    }\n    //Appointment Section --->\n    scheduleAppointment(appointmentScheduleDTO) {\n      const url = `${this.baseUrl}/appointments/schedule-appointment`;\n      return this.httpClient.put(url, appointmentScheduleDTO);\n    }\n    rescheduleAppointment(appointmentRescheduleDTO) {\n      const url = `${this.baseUrl}/appointments/reschedule-appointment`;\n      return this.httpClient.post(url, appointmentRescheduleDTO);\n    }\n    cancelAppointment(appointmentId) {\n      const url = `${this.baseUrl}/appointments/cancel-appointment/${appointmentId}`;\n      return this.httpClient.post(url, null);\n    }\n    getAllAppointments(patientPersonalId) {\n      const url = `${this.baseUrl}/appointments/list-all/${patientPersonalId}`;\n      return this.httpClient.get(url);\n    }\n    getUpcomingAppointments(patientPersonalId) {\n      const url = `${this.baseUrl}/appointments/list-upcoming/${patientPersonalId}`;\n      return this.httpClient.get(url);\n    }\n    getPastAppointments(patientPersonalId) {\n      const url = `${this.baseUrl}/appointments/list-past/${patientPersonalId}`;\n      return this.httpClient.get(url);\n    }\n    getDateAppointments(appointmentDatePatientSearchDTO) {\n      const url = `${this.baseUrl}/appointments/list-date`;\n      return this.httpClient.request(\"get\", url, {\n        body: appointmentDatePatientSearchDTO\n      });\n    }\n    listPhysicians(physicianSearchDTO) {\n      const url = `${this.baseUrl}/appointments/list-physicians`;\n      let params = new HttpParams().set('searchParameter', physicianSearchDTO.searchParameter.toString()).set('searchValue', physicianSearchDTO.searchValue);\n      return this.httpClient.get(url, {\n        params\n      });\n    }\n    //Claims Section --->\n    newClaim(claimRegisterDTO) {\n      const url = `${this.baseUrl}/claims/new-claim`;\n      return this.httpClient.put(url, claimRegisterDTO);\n    }\n    addMessage(claimAnswerDTO) {\n      const url = `${this.baseUrl}/claims/add-message`;\n      return this.httpClient.put(url, claimAnswerDTO);\n    }\n    listAllSolvedClaims(claimListingPatientDTO) {\n      const url = `${this.baseUrl}/claims/list-by-status`;\n      const params = new HttpParams().set('patientPersonalId', claimListingPatientDTO.patientPersonalId) // Asegúrate de que este sea el nombre correcto del parámetro.\n      .set('claimState', claimListingPatientDTO.claimState); // Asegúrate de que este sea el nombre correcto del parámetro.\n      return this.httpClient.get(url, {\n        params\n      });\n    }\n    listAllClaims(patientPersonalId) {\n      const url = `${this.baseUrl}/claims/list-all/${patientPersonalId}`;\n      return this.httpClient.get(url);\n    }\n    searchClaim(claimSearchDTO) {\n      const url = `${this.baseUrl}/claims/claim-search`;\n      const mappedParams = this.mapClaimSearchDTOToParams(claimSearchDTO);\n      return this.httpClient.get(url, {\n        params: mappedParams,\n        observe: 'body'\n      });\n    }\n    seeClaimDetails(claimSearchDTO) {\n      const url = `${this.baseUrl}/claims/claim-details`;\n      const mappedParams = this.mapClaimSearchDTOToParams(claimSearchDTO);\n      return this.httpClient.get(url, {\n        params: mappedParams,\n        observe: 'body'\n      });\n    }\n    //membership section --->\n    addPatientToMembership(membershipPatientModificationDTO) {\n      const url = `${this.baseUrl}/membership/add-patient`;\n      return this.httpClient.post(url, membershipPatientModificationDTO);\n    }\n    removePatientFromMembership(membershipPatientModificationDTO) {\n      const url = `${this.baseUrl}/membership/remove-patient`;\n      return this.httpClient.post(url, membershipPatientModificationDTO);\n    }\n    acquireMembership(membershipAcquirementDTO) {\n      const url = `${this.baseUrl}/membership/acquire-membership`;\n      return this.httpClient.put(url, membershipAcquirementDTO);\n    }\n    resignMembership(patientPersonalId) {\n      const url = `${this.baseUrl}/membership/resign-membership/${patientPersonalId}`;\n      return this.httpClient.post(url, null);\n    }\n    makePaymentToMembershipCharge(membershipPaymentDTO) {\n      const url = `${this.baseUrl}/membership/pay-charge`;\n      return this.httpClient.post(url, membershipPaymentDTO);\n    }\n    getChargesFromMembership(chargeListDTO) {\n      const url = `${this.baseUrl}/membership/view-charges`;\n      return this.httpClient.post(url, chargeListDTO);\n    }\n    getPaymentsFromCharge(paymentListDTO) {\n      const url = `${this.baseUrl}/membership/view-payments`;\n      return this.httpClient.post(url, paymentListDTO);\n    }\n    mapClaimSearchDTOToParams(claimSearchDTO) {\n      return new HttpParams().set('claimId', claimSearchDTO.claimId.toString()).set('patientPersonalId', claimSearchDTO.patientPersonalId);\n    }\n    static #_ = this.ɵfac = function PatientService_Factory(t) {\n      return new (t || PatientService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PatientService,\n      factory: PatientService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PatientService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}