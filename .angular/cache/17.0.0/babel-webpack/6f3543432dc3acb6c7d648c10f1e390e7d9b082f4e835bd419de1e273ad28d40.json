{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Samuel/deep-pills/Deep-Pills-Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// patient-dashboard.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ClaimSearchDTO } from '../../models/model-dto';\nimport { ClaimsPopup } from './claims-popup/claims-popup.component';\nlet PatientDashboard = class PatientDashboard {\n  constructor(dialog, fb, patientService, tokenService, enums, router, modalService) {\n    this.dialog = dialog;\n    this.fb = fb;\n    this.patientService = patientService;\n    this.tokenService = tokenService;\n    this.enums = enums;\n    this.router = router;\n    this.modalService = modalService;\n    this.holderName = \"Holder-Name\";\n    this.patientAlergies = [];\n    this.loadingAppointments = false;\n    this.appointmentData = {\n      \"appointmentId\": 0,\n      \"patientPersonalId\": \"\",\n      \"date\": new Date(),\n      \"time\": new Date(),\n      \"location\": \"\",\n      \"duration\": 0,\n      \"requestTime\": new Date(),\n      \"detailedReasons\": \"\",\n      \"doctorsNotes\": \"\",\n      \"appointmentState\": \"\",\n      \"claims\": [],\n      \"treatments\": [],\n      \"emailsIds\": [],\n      \"physicianInfo\": {\n        \"physicianId\": 0,\n        \"name\": \"\",\n        \"lastName\": \"\"\n      },\n      \"symptoms\": []\n    };\n    this.loadingClaims = false;\n    this.patientPID = \"\";\n    console.log('PatientDashboard component constructor');\n    this.updateForm = this.fb.group({\n      name: new FormControl(),\n      lastName: new FormControl(),\n      dateOfBirth: new FormControl(),\n      phone: new FormControl(),\n      email: new FormControl(),\n      city: new FormControl(),\n      pic: new FormControl(),\n      bloodType: new FormControl(),\n      eps: new FormControl()\n    });\n  }\n  ngOnInit() {\n    console.log('PatientDashboard component ngOnInit');\n    this.enums.getEnumValues('City').subscribe(message => {\n      console.log('City loaded');\n      this.cities = message.message;\n    }, error => {\n      console.error('Error al obtener los valores de City', error);\n    });\n    this.enums.getEnumValues('EPS').subscribe(message => {\n      console.log('EPS loaded');\n      this.epsValues = message.message;\n    }, error => {\n      console.error('Error al obtener los valores de EPS', error);\n    });\n    this.enums.getEnumValues('BloodType').subscribe(message => {\n      console.log('BloodType loaded');\n      this.bloodTypeValues = message.message;\n    }, error => {\n      console.error('Error al obtener los valores de BloodType', error);\n    });\n    this.enums.getEnumValues('Allergy').subscribe(message => {\n      console.log('Allergy loaded');\n      this.alergyValues = message.message;\n    }, error => {\n      console.error('Error al obtener los valores de Allergy', error);\n    });\n    this.loadWindow();\n  }\n  loadWindow() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.loadPatientInfo();\n      console.log(\"Now proceeding to load appointments...\");\n      _this.loadAppointments('upcoming');\n      _this.loadClaims();\n    })();\n  }\n  loadPatientInfo() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      console.log('Loading patient information...');\n      if (_this2.tokenService.isLogged() === false) {\n        console.error('Not authenticated. Redirecting to Log-in in');\n        alert('Not authenticated. Redirecting to Log-in');\n        _this2.router.navigate(['/log-in']);\n        return;\n      }\n      const patientId = _this2.tokenService.getUserId();\n      try {\n        const data = yield _this2.patientService.loadPatientInfo(patientId).toPromise();\n        const patientInfo = data.message;\n        _this2.holderName = patientInfo.name;\n        console.log('Patient information loaded successfully:', patientInfo);\n        console.log(patientInfo);\n        _this2.patientPID = patientInfo.patientPersonalId;\n        console.log(\"PID (prof): \" + patientInfo.patientPersonalId + \"->\" + _this2.patientPID);\n        // Utiliza patchValue o setValue para actualizar el formulario\n        _this2.updateForm.patchValue({\n          name: patientInfo.name,\n          lastName: patientInfo.lastName,\n          dateOfBirth: patientInfo.dateOfBirth,\n          phone: patientInfo.phone,\n          email: patientInfo.email,\n          city: patientInfo.city,\n          pic: patientInfo.pictureUrl,\n          bloodType: patientInfo.bloodType,\n          eps: patientInfo.eps\n        });\n        _this2.patientAlergies = patientInfo.allergies;\n        // Guarda el valor original del formulario\n        _this2.originalFormValue = _this2.updateForm.value;\n        console.log('Form values after patching:', _this2.updateForm.value, _this2.patientAlergies);\n      } catch (error) {\n        console.error('Error al cargar la información del paciente', error);\n      }\n      console.log('Form values after patching:', _this2.updateForm.value, _this2.patientAlergies);\n    })();\n  }\n  updatePatientInfo() {\n    if (this.updateForm.valid) {\n      // Crea un objeto con solo los campos modificados\n      const modifiedData = {\n        id: this.tokenService.getUserId(),\n        name: this.updateForm.value.name ?? null,\n        lastName: this.updateForm.value.lastName ?? null,\n        dateOfBirth: this.updateForm.value.dateOfBirth ?? null,\n        phone: this.updateForm.value.phone ?? null,\n        email: this.updateForm.value.email ?? null,\n        city: this.updateForm.value.city ?? null,\n        pic: this.updateForm.value.pic ?? null,\n        bloodType: this.updateForm.value.bloodType ?? null,\n        eps: this.updateForm.value.eps ?? null,\n        allergies: this.patientAlergies\n      };\n      console.log(modifiedData);\n      this.patientService.updatePatientInfo(modifiedData).subscribe(response => {\n        console.log(response);\n      }, error => {\n        console.error('Error al actualizar la información del paciente', error);\n      });\n    } else {\n      // El formulario no es válido, realiza las acciones necesarias\n    }\n  }\n  toggleAlergy(alergy) {\n    if (this.patientAlergies) {\n      const index = this.patientAlergies.indexOf(alergy);\n      if (index !== -1) {\n        this.patientAlergies.splice(index, 1);\n      } else {\n        this.patientAlergies.push(alergy);\n      }\n    }\n  }\n  loadAppointments(option) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      console.log(\"Loading \" + option + \" appointments...\");\n      let serviceFunction;\n      switch (option) {\n        case 'all':\n          serviceFunction = _this3.patientService.getAllAppointments;\n          break;\n        case 'upcoming':\n          serviceFunction = _this3.patientService.getUpcomingAppointments;\n          break;\n        case 'past':\n          serviceFunction = _this3.patientService.getPastAppointments;\n          break;\n        case 'onDate':\n          serviceFunction = _this3.patientService.getDateAppointments;\n          break;\n      }\n      if (serviceFunction) {\n        if (option === 'onDate') {\n          const inputDate = yield _this3.askForDate(); // Esperar a que se complete askForDate\n          console.log(inputDate);\n          serviceFunction.call(_this3.patientService, {\n            patientPersonalId: _this3.patientPID,\n            date: inputDate.toISOString().slice(0, 10) // Tomar solo la parte de la fecha\n          }).subscribe(response => {\n            _this3.loadingAppointments = false;\n            _this3.appointments = response.message;\n            console.log(response.message);\n          }, error => {\n            console.error('Error while loading the appointments', error);\n          });\n        } else {\n          serviceFunction.call(_this3.patientService, _this3.patientPID).subscribe(response => {\n            _this3.loadingAppointments = false;\n            _this3.appointments = response.message;\n            console.log(response.message);\n          }, error => {\n            console.error('Error while loading the appointments', error);\n          });\n        }\n      } else {\n        console.error('Invalid option for loading appointments');\n      }\n    })();\n  }\n  askForDate() {\n    return new Promise(resolve => {\n      const date = '';\n      while (true) {\n        const yearInput = prompt('Ingrese el año:');\n        if (yearInput === null) {\n          // Si el usuario presiona Cancelar, salir del bucle\n          break;\n        }\n        // Solicitar mes\n        const monthInput = prompt('Ingrese el mes:');\n        if (monthInput === null) {\n          // Si el usuario presiona Cancelar, salir del bucle\n          break;\n        }\n        // Solicitar día\n        const dayInput = prompt('Ingrese el día:');\n        if (dayInput === null) {\n          // Si el usuario presiona Cancelar, salir del bucle\n          break;\n        }\n        // Validar el formato de la fecha\n        const inputDate = new Date(`${yearInput}-${monthInput}-${dayInput}`);\n        if (isNaN(inputDate.getTime())) {\n          alert('Formato de fecha inválido. Por favor, inténtelo de nuevo.');\n          continue; // Reiniciar el bucle para solicitar la fecha nuevamente\n        }\n        // Confirmar la fecha ingresada\n        const confirmation = confirm(`¿Es correcta la fecha ingresada?\\n${inputDate.toDateString()}`);\n        if (confirmation) {\n          resolve(inputDate); // Resuelve la promesa con la fecha\n          break;\n        } else {\n          // El usuario no confirmó la fecha, reiniciar el bucle\n          continue;\n        }\n      }\n    });\n  }\n  getAppointmentDetails(appointmentId) {\n    this.patientService.getAppointmentDetails(appointmentId).subscribe(response => {\n      this.appointmentData = response.message;\n      console.log(\"app loaded: \", response);\n    }, error => {\n      console.error('Error al obtener los detalles de la cita', error);\n    });\n  }\n  createNewAppointment() {}\n  cancel(appointmentId) {\n    if (confirm('Do you wish to cancel this appointment?\\nThis action cannot be undone.')) {\n      this.patientService.cancelAppointment(appointmentId).subscribe(response => {\n        alert(response.message);\n      }, error => {\n        alert(error.message);\n      });\n    }\n  }\n  resh(appointmentId) {\n    if (confirm('Do you wish to reschedule this appointment?')) {\n      /*\n      this.patientService.rescheduleAppointment().subscribe(\n       (response)=>{\n         alert(response.message)\n       },\n       (error) => {\n         alert(error.message)\n       }\n      );\n      */\n    }\n  }\n  logout() {\n    this.tokenService.logout();\n    this.router.navigate(['/log-in']);\n    console.log('Logging out...');\n  }\n  loadClaims() {\n    this.loadingClaims = true;\n    this.patientService.listAllClaims(this.patientPID).subscribe(response => {\n      this.loadingClaims = false;\n      this.claims = response.message;\n      console.log(response.message);\n    }, error => {\n      // Manejar el error si es necesario\n    }, () => {\n      this.loadingClaims = false;\n    });\n  }\n  viewClaimDetails(claimId) {\n    this.patientService.seeClaimDetails(new ClaimSearchDTO(claimId, this.patientPID)).subscribe(response => {\n      this.openClaimsPopup(response.message);\n    }, error => {\n      alert('Error fetching claim details');\n    });\n  }\n  openClaimsPopup(details) {\n    const dialogRef = this.dialog.open(ClaimsPopup, {\n      data: details,\n      width: '800px'\n    });\n  }\n};\nPatientDashboard = __decorate([Component({\n  selector: 'patient-dashboard',\n  templateUrl: 'patient-dashboard.component.html',\n  styleUrls: ['patient-dashboard.component.css']\n})], PatientDashboard);\nexport { PatientDashboard };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}